const axios = require('axios');

module.exports = async (req, res) => {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  try {
    let body = '';
    await new Promise((resolve) => {
      req.on('data', chunk => { body += chunk });
      req.on('end', resolve);
    });

    const { message } = JSON.parse(body);

    const prompt = `
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂ –≤ CRM.  
–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –≤—ã–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç.

üîç –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:

1. –û–ø—Ä–µ–¥–µ–ª–∏ —è–∑—ã–∫ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–†—É—Å—Å–∫–∏–π" –∏–ª–∏ "English")
2. –í—ã–¥–µ–ª–∏ –í–°–ï –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è (–±–µ–∑ –≤—ã–¥—É–º–æ–∫!)
3. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ü–µ–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞, —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞, –µ–≥–æ –æ–∂–∏–¥–∞–Ω–∏–π
4. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —Å —É—á—ë—Ç–æ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö)
5. –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö

üí¨ –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
{
  "language": "–†—É—Å—Å–∫–∏–π",
  "keywords": ["–ø–ª–æ—â–∞–¥—å 120–º2", "–∫—Ä—ã—à–∞", "–ß–∞–Ω–≥—É", "—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –∞–ø—Ä–µ–ª–µ"],
  "analysis": "–ö–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã –∏ —É–∫–∞–∑–∞–ª –ª–æ–∫–∞—Ü–∏—é. –û–Ω –∂–¥—ë—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è.",
  "reply": "–°–ø–∞—Å–∏–±–æ! –†–∞–∑–º–µ—Ä—ã –∏ –ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω—ã. –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
  "sales_recommendation": "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ö–ü –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ó–∞—Ç–µ–º ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–µ–º–æ –∏–ª–∏ –≤—ã–µ–∑–¥ –Ω–∞ –æ–±—ä–µ–∫—Ç."
}

üì• –ü–µ—Ä–µ–ø–∏—Å–∫–∞:
"""${message}"""

‚ö†Ô∏è –í–∞–∂–Ω–æ: –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown, –Ω–µ –¥–æ–±–∞–≤–ª—è–π \`\`\`, –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.
`;

    const openaiRes = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0
    }, {
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    const raw = openaiRes.data.choices[0].message.content;

    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –æ–±—ë—Ä—Ç–∫–∏ –≤—Ä–æ–¥–µ ```json
    const cleaned = raw
      .replace(/^```json/, '')
      .replace(/^```/, '')
      .replace(/```$/, '')
      .trim();

    let parsed;
    try {
      parsed = JSON.parse(cleaned);
    } catch (err) {
      parsed = {
        reply: cleaned,
        error: "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON. –í–æ—Ç —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç:",
        raw
      };
    }

    res.status(200).json(parsed);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
