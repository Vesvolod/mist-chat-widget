const axios = require('axios');

module.exports = async (req, res) => {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  try {
    let body = '';
    await new Promise((resolve) => {
      req.on('data', chunk => { body += chunk });
      req.on('end', resolve);
    });

    const { message } = JSON.parse(body);

    const prompt = `
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂ –≤ CRM.  
–¢—ã –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–ª–Ω—ã–π –ª–æ–≥ –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å:
- —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
- —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è CRM: "Moved to", "The value of field", "Invoice sent", "Delivered", "From Robot", –∏ —Ç.–ø.

üîç –í–∞–∂–Ω–æ: –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ —Ñ–æ—Ä–º–∏—Ä—É–π –≤—ã–≤–æ–¥—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–∏–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.

üéØ –¢–≤–æ—è –∑–∞–¥–∞—á–∞:

1. –û–ø—Ä–µ–¥–µ–ª–∏ —è–∑—ã–∫ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–†—É—Å—Å–∫–∏–π", "English", "Bahasa")
2. –í—ã–¥–µ–ª–∏ –í–°–ï –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ª–æ–∫–∞—Ü–∏—è, —Ä–∞–∑–º–µ—Ä—ã, –±—é–¥–∂–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å, —Å—Ä–æ–∫–∏)
3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π: —á–µ–≥–æ —Ö–æ—á–µ—Ç –∫–ª–∏–µ–Ω—Ç, –Ω–∞ –∫–∞–∫–æ–π —Å—Ç–∞–¥–∏–∏ –æ–Ω, –µ—Å—Ç—å –ª–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è
4. –°—Ñ–æ—Ä–º–∏—Ä—É–π –≤–µ–∂–ª–∏–≤—ã–π, –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç **–≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º**, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —è–∑—ã–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
5. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –ø—Ä–æ–¥–∞–∂

üì¶ –§–æ—Ä–º–∞—Ç JSON-–æ—Ç–≤–µ—Ç–∞:
{
  "language": "Bahasa",
  "keywords": ["Jakarta", "—É—Å—Ç–∞–Ω–æ–≤–∫–∞", "–ø–µ—Ä–∏–º–µ—Ç—Ä 150 –º–µ—Ç—Ä–æ–≤", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å–º–µ—Ç–∞", "–∏–Ω—Ç–µ—Ä–µ—Å", "–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å"],
  "analysis": "–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—è–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –û–Ω –æ–∂–∏–¥–∞–µ—Ç –ö–ü. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è.",
  "reply": "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å.",
  "sales_recommendation": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ö–ü –∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–≤–æ–Ω–æ–∫/–¥–µ–º–æ. –£—Ç–æ—á–Ω–∏—Ç—å —Å—Ä–æ–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è."
}

üì• –ü–µ—Ä–µ–ø–∏—Å–∫–∞ (–≤–∫–ª—é—á–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏):
"""${message}"""

‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ markdown, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ –æ–±—ë—Ä—Ç–æ–∫ \`\`\`
`;

    const openaiRes = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0
    }, {
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    const raw = openaiRes.data.choices[0].message.content;

    // –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ markdown-–æ–±—ë—Ä—Ç–∫–∏
    const cleaned = raw
      .replace(/^```json/, '')
      .replace(/^```/, '')
      .replace(/```$/, '')
      .trim();

    let parsed;
    try {
      parsed = JSON.parse(cleaned);
    } catch {
      parsed = {
        reply: cleaned,
        error: "‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON",
        raw
      };
    }

    res.status(200).json(parsed);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
